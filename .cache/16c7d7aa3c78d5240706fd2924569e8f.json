{"dependencies":[{"name":"pixi.js","loc":{"line":4,"column":19}},{"name":"../app/player","loc":{"line":5,"column":23}},{"name":"./spaceDebris","loc":{"line":6,"column":28}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GameApp = void 0;\nvar PIXI = require(\"pixi.js\");\nvar player_1 = require(\"../app/player\");\nvar spaceDebris_1 = require(\"./spaceDebris\");\n// Prepare frames\n// const playerFrames: GetSprite = spriteFrames;\nvar GameApp = /** @class */ (function () {\n    function GameApp(parent, width, height) {\n        this.app = new PIXI.Application({\n            width: width,\n            height: height,\n            // TODO: change background to background image\n            backgroundColor: 0x000000,\n            resolution: 3,\n        });\n        PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;\n        GameApp.Stage = this.app.stage;\n        GameApp.Width = width - 1;\n        parent.replaceChild(this.app.view, parent.lastElementChild);\n        // Set keyboard event\n        window.onkeydown = function (ev) {\n            if (ev.key == \" \") {\n                GameApp.PressedSpace = true;\n                console.log(\"space pressed\");\n            }\n            if (ev.key == \"ArrowDown\" || ev.key == \"w\") {\n                GameApp.PressedDown = true;\n            }\n            if (ev.key == \"ArrowUp\" || ev.key == \"s\") {\n                GameApp.PressedUp = true;\n            }\n        };\n        GameApp.SetUpGame();\n        this.app.ticker.add(function (delta) {\n            // GameApp.Update(delta)\n        });\n    }\n    // Sets game stage\n    GameApp.SetUpGame = function () {\n        this.Score = 0;\n        this.ActiveEntites = new Array();\n        this.Stage.removeChild();\n        // Initalize player\n        var player = new player_1.Player();\n        GameApp.ActiveEntites.push(player);\n        // Add score board to stage\n        GameApp.Stage.addChild(GameApp.ScoreBoard);\n        // GameApp.Stage.addChild(player);\n        this.ScoreNextObstacle = 0;\n    };\n    GameApp.Update = function (delta) {\n        if (this.Play) {\n            // TODO: Loop over current activity space objects\n            // and Update the current entity (could be player or space debris)\n            // TODO: Update the score\n            // TODO: Check if current score is bigger than max score then set new max score\n            // TODO: Check if new space debris needs to be shown on stage\n        }\n        else {\n            // When spaced pressed to start the game\n            if (GameApp.PressedSpace) {\n                this.Play = false;\n                this.SetUpGame();\n            }\n            GameApp.PressedSpace = false;\n        }\n    };\n    // Calculates the \"hypothetical\" score if user jumps the next space debris\n    // TODO: think of a model for calculating scores\n    GameApp.calculateNextSpaceDebrisScore = function () {\n    };\n    // Checks if next space debris needs to be place on screen\n    GameApp.ShouldPlaceNextSpaceDebris = function () {\n        return true;\n    };\n    // Add new SpaceDebris to stage\n    GameApp.AddSpaceDebris = function (spriteName, height, isSolid) {\n        var spaceDebris = new spaceDebris_1.SpaceDebris(spriteName, GameApp.Width, height, isSolid);\n        GameApp.ActiveEntites.push(spaceDebris);\n        GameApp.Stage.addChild(spaceDebris.sprite);\n    };\n    // Set up score board\n    GameApp.ScoreBoard = new PIXI.Text(\"Score: \", {\n        fontSize: 7,\n        align: \"center\",\n        fill: \"#ffffff\",\n    });\n    GameApp.Width = 0;\n    GameApp.Play = false;\n    GameApp.PressedUp = false;\n    GameApp.PressedDown = false;\n    GameApp.PressedSpace = false; // space bar used to start the game\n    GameApp.ActiveEntites = [];\n    GameApp.spaceDebrisSpeed = 3;\n    // Variable used to check if next obstacle should be staged\n    // Used to compare current score \n    // with \"hypothetical\" next score if user jumps the next object\n    GameApp.ScoreNextObstacle = 0;\n    GameApp.Score = 0;\n    GameApp.MaxScore = 0;\n    return GameApp;\n}());\nexports.GameApp = GameApp;\n//# sourceMappingURL=app.js.map"},"hash":"1969b0f701833ddd6804e765c8a5b04d"}