{"dependencies":[{"name":"@pixi/core","loc":{"line":8,"column":52}},{"name":"@pixi/sprite","loc":{"line":9,"column":23}},{"name":"@pixi/display","loc":{"line":10,"column":30}},{"name":"@pixi/math","loc":{"line":11,"column":23}},{"name":"@pixi/utils","loc":{"line":12,"column":20}},{"name":"@pixi/settings","loc":{"line":13,"column":25}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CacheData = undefined;\n\nvar _core = require(\"@pixi/core\");\n\nvar _sprite = require(\"@pixi/sprite\");\n\nvar _display = require(\"@pixi/display\");\n\nvar _math = require(\"@pixi/math\");\n\nvar _utils = require(\"@pixi/utils\");\n\nvar _settings = require(\"@pixi/settings\");\n\n/*!\n * @pixi/mixin-cache-as-bitmap - v5.3.3\n * Compiled Tue, 04 Aug 2020 16:23:09 UTC\n *\n * @pixi/mixin-cache-as-bitmap is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nvar _tempMatrix = new _math.Matrix();\n_display.DisplayObject.prototype._cacheAsBitmap = false;\n_display.DisplayObject.prototype._cacheData = null;\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n */\nvar CacheData = /** @class */function () {\n  function CacheData() {\n    this.textureCacheId = null;\n    this.originalRender = null;\n    this.originalRenderCanvas = null;\n    this.originalCalculateBounds = null;\n    this.originalGetLocalBounds = null;\n    this.originalUpdateTransform = null;\n    this.originalDestroy = null;\n    this.originalMask = null;\n    this.originalFilterArea = null;\n    this.originalContainsPoint = null;\n    this.sprite = null;\n  }\n  return CacheData;\n}();\nObject.defineProperties(_display.DisplayObject.prototype, {\n  /**\n   * Set this to true if you want this display object to be cached as a bitmap.\n   * This basically takes a snap shot of the display object as it is at that moment. It can\n   * provide a performance benefit for complex static displayObjects.\n   * To remove simply set this property to `false`\n   *\n   * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n   * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  cacheAsBitmap: {\n    get: function () {\n      return this._cacheAsBitmap;\n    },\n    set: function (value) {\n      if (this._cacheAsBitmap === value) {\n        return;\n      }\n      this._cacheAsBitmap = value;\n      var data;\n      if (value) {\n        if (!this._cacheData) {\n          this._cacheData = new CacheData();\n        }\n        data = this._cacheData;\n        data.originalRender = this.render;\n        data.originalRenderCanvas = this.renderCanvas;\n        data.originalUpdateTransform = this.updateTransform;\n        data.originalCalculateBounds = this.calculateBounds;\n        data.originalGetLocalBounds = this.getLocalBounds;\n        data.originalDestroy = this.destroy;\n        data.originalContainsPoint = this.containsPoint;\n        data.originalMask = this._mask;\n        data.originalFilterArea = this.filterArea;\n        this.render = this._renderCached;\n        this.renderCanvas = this._renderCachedCanvas;\n        this.destroy = this._cacheAsBitmapDestroy;\n      } else {\n        data = this._cacheData;\n        if (data.sprite) {\n          this._destroyCachedDisplayObject();\n        }\n        this.render = data.originalRender;\n        this.renderCanvas = data.originalRenderCanvas;\n        this.calculateBounds = data.originalCalculateBounds;\n        this.getLocalBounds = data.originalGetLocalBounds;\n        this.destroy = data.originalDestroy;\n        this.updateTransform = data.originalUpdateTransform;\n        this.containsPoint = data.originalContainsPoint;\n        this._mask = data.originalMask;\n        this.filterArea = data.originalFilterArea;\n      }\n    }\n  }\n});\n/**\n * Renders a cached version of the sprite with WebGL\n *\n * @private\n * @function _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\n_display.DisplayObject.prototype._renderCached = function _renderCached(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n  this._initCachedDisplayObject(renderer);\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n  this._cacheData.sprite._render(renderer);\n};\n/**\n * Prepares the WebGL renderer to cache the sprite\n *\n * @private\n * @function _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\n_display.DisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer) {\n  if (this._cacheData && this._cacheData.sprite) {\n    return;\n  }\n  // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n  var cacheAlpha = this.alpha;\n  this.alpha = 1;\n  // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n  renderer.batch.flush();\n  // this.filters= [];\n  // next we find the dimensions of the untransformed object\n  // this function also calls updatetransform on all its children as part of the measuring.\n  // This means we don't need to update the transform again in this function\n  // TODO pass an object to clone too? saves having to create a new one each time!\n  var bounds = this.getLocalBounds(null, true).clone();\n  // add some padding!\n  if (this.filters) {\n    var padding = this.filters[0].padding;\n    bounds.pad(padding);\n  }\n  bounds.ceil(_settings.settings.RESOLUTION);\n  // for now we cache the current renderTarget that the WebGL renderer is currently using.\n  // this could be more elegant..\n  var cachedRenderTexture = renderer.renderTexture.current;\n  var cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n  var cachedProjectionTransform = renderer.projection.transform;\n  // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n  // const stack = renderer.filterManager.filterStack;\n  // this renderTexture will be used to store the cached DisplayObject\n  var renderTexture = _core.RenderTexture.create({ width: bounds.width, height: bounds.height });\n  var textureCacheId = \"cacheAsBitmap_\" + (0, _utils.uid)();\n  this._cacheData.textureCacheId = textureCacheId;\n  _core.BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n  _core.Texture.addToCache(renderTexture, textureCacheId);\n  // need to set //\n  var m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n  // set all properties to there original so we can render to a texture\n  this.render = this._cacheData.originalRender;\n  renderer.render(this, renderTexture, true, m, false);\n  // now restore the state be setting the new properties\n  renderer.projection.transform = cachedProjectionTransform;\n  renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame);\n  // renderer.filterManager.filterStack = stack;\n  this.render = this._renderCached;\n  // the rest is the same as for Canvas\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null;\n  // create our cached sprite\n  var cachedSprite = new _sprite.Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1;\n  // restore the transform of the cached sprite to avoid the nasty flicker..\n  if (!this.parent) {\n    this.enableTempParent();\n    this.updateTransform();\n    this.disableTempParent(null);\n  } else {\n    this.updateTransform();\n  }\n  // map the hit test..\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n/**\n * Renders a cached version of the sprite with canvas\n *\n * @private\n * @function _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\n_display.DisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n  this._initCachedDisplayObjectCanvas(renderer);\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n  this._cacheData.sprite._renderCanvas(renderer);\n};\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n *\n * @private\n * @function _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\n_display.DisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(renderer) {\n  if (this._cacheData && this._cacheData.sprite) {\n    return;\n  }\n  // get bounds actually transforms the object for us already!\n  var bounds = this.getLocalBounds(null, true);\n  var cacheAlpha = this.alpha;\n  this.alpha = 1;\n  var cachedRenderTarget = renderer.context;\n  var cachedProjectionTransform = renderer._projTransform;\n  bounds.ceil(_settings.settings.RESOLUTION);\n  var renderTexture = _core.RenderTexture.create({ width: bounds.width, height: bounds.height });\n  var textureCacheId = \"cacheAsBitmap_\" + (0, _utils.uid)();\n  this._cacheData.textureCacheId = textureCacheId;\n  _core.BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n  _core.Texture.addToCache(renderTexture, textureCacheId);\n  // need to set //\n  var m = _tempMatrix;\n  this.transform.localTransform.copyTo(m);\n  m.invert();\n  m.tx -= bounds.x;\n  m.ty -= bounds.y;\n  // m.append(this.transform.worldTransform.)\n  // set all properties to there original so we can render to a texture\n  this.renderCanvas = this._cacheData.originalRenderCanvas;\n  renderer.render(this, renderTexture, true, m, false);\n  // now restore the state be setting the new properties\n  renderer.context = cachedRenderTarget;\n  renderer._projTransform = cachedProjectionTransform;\n  this.renderCanvas = this._renderCachedCanvas;\n  // the rest is the same as for WebGL\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null;\n  // create our cached sprite\n  var cachedSprite = new _sprite.Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1;\n  // restore the transform of the cached sprite to avoid the nasty flicker..\n  if (!this.parent) {\n    this.parent = renderer._tempDisplayObjectParent;\n    this.updateTransform();\n    this.parent = null;\n  } else {\n    this.updateTransform();\n  }\n  // map the hit test..\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n/**\n * Calculates the bounds of the cached sprite\n *\n * @private\n */\n_display.DisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds() {\n  this._bounds.clear();\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n  this._cacheData.sprite._calculateBounds();\n  this._bounds.updateID = this._boundsID;\n};\n/**\n * Gets the bounds of the cached sprite.\n *\n * @private\n * @return {Rectangle} The local bounds.\n */\n_display.DisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds() {\n  return this._cacheData.sprite.getLocalBounds(null);\n};\n/**\n * Destroys the cached sprite.\n *\n * @private\n */\n_display.DisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject() {\n  this._cacheData.sprite._texture.destroy(true);\n  this._cacheData.sprite = null;\n  _core.BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n  _core.Texture.removeFromCache(this._cacheData.textureCacheId);\n  this._cacheData.textureCacheId = null;\n};\n/**\n * Destroys the cached object.\n *\n * @private\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\n_display.DisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options) {\n  this.cacheAsBitmap = false;\n  this.destroy(options);\n};\n\nexports.CacheData = CacheData;\n//# sourceMappingURL=mixin-cache-as-bitmap.es.js.map"},"hash":"3fcf26dfd9d44a24cfffd3642259b06d"}